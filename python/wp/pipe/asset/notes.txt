
tags vs hierarchy
hierarchy
tags actually was too complicated and ultimately not clear
this does require us to be more flexible with how we structure db,
classic example - for a coat worn by Dave:
character / dave / costume / coat ?
costume / character / dave / coat ?
I would say the main association is with the character, so character should go first,
this is not tenable as the idea of association widens -
but at this point we can also use tags from the path


character : ursus
ursus as a top asset has no guaranteed resources - could be different versions of the body, different costumes, ages, etc

most things under ursus need never be shared or inherited by other assets (except other assets under ursus)

get final body asset
("ursus", "body", "age:101")
asset includes model, rig, textures, shaders
some of which have been generated by other assets
as COMPONENTS?
like game engine, where assets may have certain components, or not?

(ursus, body, ref) ?

(ref, body)

age:101 - would be a variant tag
damage:0 - would be a variant tag
(we could consider damage a subvariant of age, aside the idea of accumulating damage over time)

(ursus, groom, beard)
ursus, groom, hair?


eyes, muscles, skin - form a holistic system running on constraints
move eyes - adjust others
move skin - position eyes best fit in eye sockets, fit muscles to skin,


ursus is big muscly old dude with beard and costumes
- costume made of pieces - similar kinds of pieces
- sandals,
- sashes
- over time, solid tendrils of bone grow out of his scapulae and vertebrae, eventually breaking through the skin

absolute chad move would be to define a continuum of the featherback growth, define sculpts, textures, anatomy for keypoints, and then expose the growth as a parametre on the asset -
and every time he's used in a scene, bake out specific resources for that specific damage level
same thing for the progression of illness


fabric is its own difficulty - try way to treat a sash and a shirt the same
- both built from patterns
- both allow actual and target cloth shapes, using folds in the base pose
- allow generating more detail from panels, rings, cuts, etc
- rig is generated / inherent based on these - by default just transfer skin from body



ursus / body /
     _out /
        # out for this general an asset may still not be useful - the "default" Ursus body
        # no guarantee as to what this will be
        # BUT a resource not overridden from here will still carry through

     head / # sub asset of Ursus' head / face
        sculpt.usd
        process.hip
        _out / # each asset defines "_out" for its final components
            model.usd
            texture /
            shader /
            data /

        var_age-101 / # head has override data defined for a variant tag "age" value 101
            _out /
                model.usd # this variant only defines mesh data
                data / # and more esoteric data like muscle presets
                apply.chi
            sculpt.usd
            process.hip
            rig.chi
            rules.chi # chimaera file defining how this variant data overrides default head

    var_age-101 / # for this age tag, apply these overrides by rules
        _out /
            apply.chim
    var_age-101_damage-(lostArm-OR-lostFoot) / # apply this data only where ursus has a booboo
        _out /
            apply.chi
        # not sure i like the sql-query-as-folder-name aesthetic, but it is explicit on what that folder is affecting
    # subsequent tool should show what activates for a combination of variants

ben /
    _depend.chim # list of asset paths to copy into Ben, overriding any others in sequence
        # depends on Ursus, who'da thunk



age as parametre could be interesting, elegant way to structure archetype genM / genF
master age is 0, birth - define topology here in weightless neutral pose

for working, try to avoid folder spam in the path?
tempest / asset / char / ursus / body / _work / sculpt.usd
tempest / asset / char / ursus / body / _work_ed / sculpt.usd


don't use "gen" in asset names, too confusing with prefix for generation
"source" is better

out_
for output procedural assets, include
    - hda ref path
    - parametres
    - deltas over the base hda if nodes added


VERSIONING

assume that we can use some external VCS for controlling in general,
use a _version folder under each asset if we ever need to roll back live
tempest / asset / character / ursus /
    _out
    _version
        22 # copied snapshot of entire asset AND DEPENDENCIES
            _in # in recursively copies everything this version relied on
            _out
            _work




